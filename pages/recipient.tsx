import Head from "next/head";
import Image from "next/image";
import { Inter } from "@next/font/google";
import styles from "../styles/Home.module.css";

import { trpc } from "../utils/trpc";
import { useEffect, useState } from "react";
import { GetServerSideProps } from "next";


export default function Recipient({ publicKey }: Props) {
  const hello = trpc.hello.useQuery({ text: "recipient" });
  const putSubMutation = trpc.putSub.useMutation();

  const [pushSub, setPushSub] = useState<PushSubscriptionJSON | null>(null);

  useEffect(() => {
    console.log(globalThis.constructor.name);
    const requestPushNotifications = async () => {
      const isSupported =
        "serviceWorker" in navigator && "PushManager" in window;
      if (!isSupported) {
        console.error("Not supported");
        return;
      }

      if (!publicKey) {
        console.error("No key");
        return;
      }

      let swRegistration = await navigator.serviceWorker.getRegistration();
      if (!swRegistration) {
        swRegistration = await navigator.serviceWorker.register("/recipient/sw.js");
      }
      console.log(swRegistration);

      const permissionRequestResult = await Notification.requestPermission();
      if (permissionRequestResult !== "granted") {
        console.error("Need to grant permission");
        return;
      }
      const serviceWorker = await navigator.serviceWorker.ready;
      let sub = await serviceWorker.pushManager.getSubscription();
      if (!sub) {
        sub = await serviceWorker.pushManager.subscribe({
          userVisibleOnly: true,
          applicationServerKey: publicKey,
        });
      }
      console.log(sub);
      setPushSub(sub.toJSON());

      await putSubMutation.mutateAsync({ name: "Bob", pushSub: sub });
    };
    requestPushNotifications().catch(console.error);
  }, [publicKey]);


  return (
    <>
      <Head>
        <title>Recipient</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <p>From TRPC: {hello.data ? hello.data.greeting : "Loading..."}</p>
        <p>Public key: {publicKey}</p>
        <p>
          Push sub:&nbsp;
          <code className={styles.code}>{JSON.stringify(pushSub)}</code>
        </p>
        <p>
          Put sub result:&nbsp;
          <code className={styles.code}>
            {JSON.stringify(putSubMutation.data?.message)}
          </code>
        </p>
      </main>
    </>
  );
}

type Props = { publicKey: string | null };

export const getServerSideProps: GetServerSideProps<Props> = async (_ctx) => {
  return {
    props: { publicKey: process.env.VAPID_PUBLIC_KEY ?? null },
  };
};
