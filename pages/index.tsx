import Head from "next/head";
import Link from "next/link";
import Image from "next/image";
import { Inter } from "@next/font/google";
import styles from "../styles/Home.module.css";

import { trpc } from "../utils/trpc";
import { useEffect, useRef, useState } from "react";
import { GetServerSideProps } from "next";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  // const hello = trpc.hello.useQuery({ text: "client" });
  // const putSubMutation = trpc.putSub.useMutation();
  // const postNotificationMutation = trpc.postNotification.useMutation();

  // const [pushSub, setPushSub] = useState<PushSubscriptionJSON | null>(null);

  // useEffect(() => {
  //   console.log(globalThis.constructor.name);
  //   const requestPushNotifications = async () => {
  //     const isSupported =
  //       "serviceWorker" in navigator && "PushManager" in window;
  //     if (!isSupported) {
  //       console.error("Not supported");
  //       return;
  //     }

  //     if (!publicKey) {
  //       console.error("No key");
  //       return;
  //     }

  //     let swRegistration = await navigator.serviceWorker.getRegistration();
  //     if (!swRegistration) {
  //       swRegistration = await navigator.serviceWorker.register("/sw.js");
  //     }
  //     console.log(swRegistration);

  //     const permissionRequestResult = await Notification.requestPermission();
  //     if (permissionRequestResult !== "granted") {
  //       console.error("Need to grant permission");
  //       return;
  //     }
  //     const serviceWorker = await navigator.serviceWorker.ready;
  //     let sub = await serviceWorker.pushManager.getSubscription();
  //     if (!sub) {
  //       sub = await serviceWorker.pushManager.subscribe({
  //         userVisibleOnly: true,
  //         applicationServerKey: publicKey,
  //       });
  //     }
  //     console.log(sub);
  //     setPushSub(sub.toJSON());

  //     await putSubMutation.mutateAsync({ name: "Bob", pushSub: sub });
  //   };
  //   requestPushNotifications().catch(console.error);
  // }, [publicKey]);

  // const notificationContentRef = useRef<HTMLInputElement>(null);
  // const notificationCountdownRef = useRef<HTMLInputElement>(null);
  // const sendNotification = async () => {
  //   const content =
  //     notificationContentRef.current?.value ?? "Hi, I'm a notification!";
  //   const countdownSec = notificationCountdownRef.current?.valueAsNumber ?? 3;
  //   postNotificationMutation.mutateAsync({ content, countdownSec });
  // };

  // return (
  //   <>
  //     <Head>
  //       <title>Pushy Next App</title>
  //       <meta name="description" content="Generated by create next app" />
  //       <meta name="viewport" content="width=device-width, initial-scale=1" />
  //       <link rel="icon" href="/favicon.ico" />
  //     </Head>
  //     <main className={styles.main}>
  //       <p>From TRPC: {hello.data ? hello.data.greeting : "Loading..."}</p>
  //       <p>Public key: {publicKey}</p>
  //       <p>
  //         Push sub:&nbsp;
  //         <code className={styles.code}>{JSON.stringify(pushSub)}</code>
  //       </p>
  //       <p>
  //         Put sub result:&nbsp;
  //         <code className={styles.code}>
  //           {JSON.stringify(putSubMutation.data?.message)}
  //         </code>
  //       </p>
  //       <form
  //         className={styles.form}
  //         onSubmit={(e) => {
  //           e.preventDefault();
  //           sendNotification();
  //         }}
  //       >
  //         <label>Content:</label>
  //         <input type="text" ref={notificationContentRef} defaultValue="Hi" />
  //         <label>Send notification in (x) seconds:</label>
  //         <input
  //           type="number"
  //           ref={notificationCountdownRef}
  //           defaultValue={3}
  //         />
  //         <button type="submit">Send notification</button>
  //       </form>
  //       <p>
  //         Send notification result:&nbsp;
  //         <code className={styles.code}>
  //           {JSON.stringify(postNotificationMutation.data?.results)}
  //         </code>
  //       </p>
  //     </main>
  //   </>
  // );

  return (
    <>
      <Head>
        <title>Pushy Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <p>
          {/* But use <a> routing. If we use internal routing the scoped service worker will not load! */}
          <a href="/recipient">Recipient</a>
        </p>
        <p>
          <Link href="/sender">Sender</Link>
        </p>
      </main>
    </>
  )
}
