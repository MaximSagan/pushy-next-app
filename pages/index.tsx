import Head from 'next/head'
import Image from 'next/image'
import { Inter } from '@next/font/google'
import styles from '../styles/Home.module.css'

import { trpc } from '../utils/trpc';
import { useEffect, useState } from 'react';
import { GetServerSideProps } from 'next'


const inter = Inter({ subsets: ['latin'] })

export default function Home({ publicKey }: Props) {
  
  const hello = trpc.hello.useQuery({ text: 'client' });

  const [pushSub, setPushSub] = useState<PushSubscriptionJSON | null>(null)

  useEffect(() => {
    console.log(globalThis.constructor.name);
    const requestPushNotifications = async () => {
      const isSupported = "serviceWorker" in navigator && "PushManager" in window;
      if (!isSupported) {
        console.error('Not supported');
        return;
      }

      if (!publicKey) {
        console.error('No key');
        return;
      }
      
      const swRegistration = await navigator.serviceWorker.register("/sw.js");
      console.log(swRegistration);
      const permissionRequestResult =  await Notification.requestPermission();
      if (permissionRequestResult !== 'granted') {
        console.error('Need to grant permission');
        return;
      }
      const serviceWorker = await navigator.serviceWorker.ready;
      const newSub = await serviceWorker.pushManager.subscribe({
        userVisibleOnly: true,
        applicationServerKey: publicKey
      });
      setPushSub(newSub.toJSON());
    }
    requestPushNotifications().catch(console.error);
    
  })

  return (
    <>
      <Head>
        <title>Pushy Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={styles.description}>
          <p>From TRPC: { hello.data ? hello.data.greeting : 'Loading...'}</p>
          <p>Public key: {publicKey}</p>
          <p>
            Sub:&nbsp;
            <code className={styles.code}>{JSON.stringify(pushSub)}</code>
          </p>
        </div>
      </main>
    </>
  );
}

type Props = { publicKey: string | null; }

export const getServerSideProps: GetServerSideProps<Props> = async (_ctx) =>{
  return {
    props: { publicKey: process.env.VAPID_PUBLIC_KEY ?? null },
  };
}